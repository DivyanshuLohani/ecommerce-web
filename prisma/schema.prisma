generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int        @id @default(autoincrement())
  name      String
  email     String     @unique
  password  String
  orders    Order[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  addresses Address[]
  isAdmin   Boolean    @default(false)
  CartItem  CartItem[]
}

model Product {
  id                Int                 @id @default(autoincrement())
  name              String
  description       String
  price             Int
  discountedPrice   Int?
  stock             Int
  imageUrl          String?
  categoryId        Int
  category          Category            @relation(fields: [categoryId], references: [id])
  slug              String              @default("")
  orders            OrderProduct[]
  status            ProductStatus       @default(ACTIVE)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  images            ProductImages[]
  CartItem          CartItem[]
  featured          Boolean             @default(false)
  AnonymousCartItem AnonymousCartItem[]
  WholesaleInquiry  WholesaleInquiry[]
}

model ProductImages {
  id        Int      @id @default(autoincrement())
  imageUrl  String
  product   Product  @relation(fields: [productId], references: [id])
  productId Int
  createdAt DateTime @default(now())
}

model Order {
  id        Int            @id @default(autoincrement())
  userId    Int?
  user      User?          @relation(fields: [userId], references: [id])
  addressId Int?
  address   Address?       @relation(fields: [addressId], references: [id])
  total     Float
  status    OrderStatus    @default(PENDING)
  products  OrderProduct[]
  payment   Payment?
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
}

model OrderProduct {
  id        Int      @id @default(autoincrement())
  orderId   Int
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId Int
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int
  price     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id        Int       @id @default(autoincrement())
  name      String
  imageUrl  String    @default("")
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Payment {
  id        Int           @id @default(autoincrement())
  orderId   Int           @unique
  order     Order         @relation(fields: [orderId], references: [id])
  paymentId String        @unique
  status    PaymentStatus
  amount    Int
  currency  String        @default("â‚¹")
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

model Address {
  id          Int      @id @default(autoincrement())
  userId      Int?
  user        User?    @relation(fields: [userId], references: [id])
  phoneNumber String   @default("")
  email       String   @default("")
  name        String
  address     String
  address2    String?
  state       String
  city        String
  pincode     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  orders      Order[]
}

model CartItem {
  userId    Int
  productId Int
  user      User    @relation(fields: [userId], references: [id])
  product   Product @relation(fields: [productId], references: [id])
  quantity  Int     @default(1)

  @@unique([userId, productId])
}

model AnonymousCartItem {
  token     String
  productId Int
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int      @default(1)
  createdAt DateTime @default(now())

  @@unique([token, productId])
}

model Banner {
  id        Int      @id @default(autoincrement())
  url       String
  imageUrl  String
  createdAt DateTime @default(now())
}

enum OrderStatus {
  PENDING
  ACCEPTED
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}

enum ProductStatus {
  ACTIVE
  DISABLED
}

model WholesaleInquiry {
  id              Int      @id @default(autoincrement())
  name            String
  email           String
  phone           String?
  companyName     String?
  message         String
  productInterest Int?
  product         Product? @relation(fields: [productInterest], references: [id])
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}
